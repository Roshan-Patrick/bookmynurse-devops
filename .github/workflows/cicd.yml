name: BookMyNurse CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - testing
          - production

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: emmamyers/bmn-backend:${{ github.sha }}

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: emmamyers/bmn-frontend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Write extra vars file
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_APP_PASSWORD: ${{ secrets.MYSQL_APP_PASSWORD }}
        run: |
          cat <<EOF > extra-vars.yml
          mysql_root_password: "${MYSQL_ROOT_PASSWORD}"
          mysql_app_password: "${MYSQL_APP_PASSWORD}"
          target_host_group: "${ENVIRONMENT}"
          EOF

      - name: Run Ansible playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
        run: |
          ansible-playbook -i ansible/ansible_inventory.txt ansible/ansible_playbook.txt --extra-vars "@extra-vars.yml" --extra-vars "confirm_migration=yes"

      - name: Deploy to Kubernetes
        if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'
        run: |
          # SSH to production server and deploy Kubernetes manifests
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.PRODUCTION_SSH_PORT }} root@${{ secrets.PRODUCTION_IP }} << 'EOF'
            # Check if project directory exists, if not clone it
            if [ ! -d "/root/bookmynurse-devops" ]; then
              echo "Project directory not found. Cloning repository..."
              cd /root
              git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git bookmynurse-devops
            fi
            
            # Navigate to the project directory and pull the latest changes
            cd /root/bookmynurse-devops
            git pull origin main
            
            # Verify required directories exist
            echo "Verifying project structure..."
            if [ ! -d "k8s" ]; then
              echo "ERROR: k8s directory not found!"
              ls -la
              exit 1
            fi
            
            if [ ! -d "k8s/backend" ] || [ ! -d "k8s/frontend" ] || [ ! -d "k8s/ingress" ]; then
              echo "ERROR: Required k8s subdirectories not found!"
              ls -la k8s/
              exit 1
            fi
            
            # Verify required files exist
            if [ ! -f "k8s/backend/deployment.yaml" ] || [ ! -f "k8s/frontend/deployment.yaml" ] || [ ! -f "k8s/ingress/ingress.yaml" ]; then
              echo "ERROR: Required k8s manifest files not found!"
              echo "Backend deployment: $(ls -la k8s/backend/deployment.yaml 2>/dev/null || echo 'MISSING')"
              echo "Frontend deployment: $(ls -la k8s/frontend/deployment.yaml 2>/dev/null || echo 'MISSING')"
              echo "Ingress: $(ls -la k8s/ingress/ingress.yaml 2>/dev/null || echo 'MISSING')"
              exit 1
            fi
            
            echo "Project structure verified successfully!"

            # Update Kubernetes manifests with the new image tag
            sed -i 's|image: emmamyers/bmn-backend:.*|image: emmamyers/bmn-backend:${{ github.sha }}|' k8s/backend/deployment.yaml
            sed -i 's|image: emmamyers/bmn-frontend:.*|image: emmamyers/bmn-frontend:${{ github.sha }}|' k8s/frontend/deployment.yaml

            # Create namespace if not exists
            kubectl create namespace bookmynurse --dry-run=client -o yaml | kubectl apply -f -
            
            # Apply all Kubernetes manifests
            kubectl apply -f k8s/namespace/ -n bookmynurse
            kubectl apply -f k8s/secrets/ -n bookmynurse
            kubectl apply -f k8s/mysql/ -n bookmynurse
            kubectl apply -f k8s/backend/ -n bookmynurse
            kubectl apply -f k8s/frontend/ -n bookmynurse
            kubectl apply -f k8s/ingress/ -n bookmynurse
            
            # Wait for deployments to be ready
            kubectl rollout status deployment/backend -n bookmynurse --timeout=300s
            kubectl rollout status deployment/frontend -n bookmynurse --timeout=300s
            
            # Check deployment status
            echo "=== Deployment Status ==="
            kubectl get pods -n bookmynurse
            kubectl get services -n bookmynurse
            kubectl get ingress -n bookmynurse
          EOF